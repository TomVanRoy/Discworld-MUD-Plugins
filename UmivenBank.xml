<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<!-- Bank Helper created by Umiven -->
<muclient>
<plugin
   name="UmivenBanker"
   author="Umiven"
   id="556d6976656e000000000001"
   language="Lua"
   purpose="Bank Tracker"
   date_written="2022-05-22"
   date_modified="2022-06-03"
   save_state="y"
   requires="5.06"
   version="1.01"
   >
</plugin>

<script>
<![CDATA[
-- ********************************************************************
-- *****                       Bank Tracker                       *****
-- *****                      For Discworld                       *****
-- *****                                                          *****
-- *****  Keeps track of the amount of money in every bank.       *****
-- *****  To use this plugin, go to each bank and get the         *****
-- *****  'balance', which will then be stored.                   *****
-- *****  You can recall the every stored bank and the amount     *****
-- *****  typing 'bank' or 'banks'. This will give you an         *****
-- *****  overview of every bank, the amount in it and a total    *****
-- *****  across all bank accounts.                               *****
-- *****  As a small aside, you can easily deposit half of your   *****
-- *****  currently held money. To do so, take out all the money  *****
-- *****  you want to deposit in the bank and look at your        *****
-- *****  inventory. Then type 'deposithalf' to deposit half of   *****
-- *****  all the money you are currently holding (rounded down). *****
-- ********************************************************************

local json = require("json")

-- function OnPluginInstall()
-- 	DeleteVariable("bankBalances")
-- end

--#region database
local banksInfo = {
	["Bing's First"] = {locations = "Bing's First Bank|branch of Bing's Bank|neat branch of Bing's bank", city = "Ankh-Morpork", streets = "Upper Broadway"},
	["Lancrastian Farmers' Cooperative"] = {locations = "Lancrastian Farmers' Cooperative Bank", city = "Ankh-Morpork, Lancre, Ohulan Cutash", streets = "The Ridings, Lancre Town square, market"},
	["First Imperial Bank of the Empire"] = {locations = "branch of the First Imperial Bank of the Empire", city = "Bes Pelargic", streets = "Market Street"},
	["Klatchian Continental"] = {locations = "Klatchian Continental Bank", city = "Djelibeybi, Ephebe", streets = "Market Street, Logical Lane"},
	["Genua National"] = {locations = "Genua National Bank", city = "Genua", streets = "Royal Avenue"},
}
--#endregion

--#region General functions
function string.addLeadingTrailing(str, max, fill, trailing)
	if type(str) ~= "string" or type(max) ~= "number" or type(fill) ~= "string" then
		Note("One of the entered variables is of the incorrect type")
	else
		-- set trailing or leading boolean optional parameter
		local trail = false
		if trailing then
			trail = trailing
		end

		local amountToAdd = max - string.len(str)
		local returnString = str
		if trail then
			for i = 1, amountToAdd, 1 do
				returnString = returnString .. fill
			end
		else
			for i = 1, amountToAdd, 1 do
				returnString = fill .. returnString
			end
		end
		return returnString
	end
end

function string.isEmpty(s)
	if type(s) == "nil" then
		return true
	elseif type(s) == "string" then
		return s == nil or s == ""
	else
		Note("input was not a string")
		return true
	end
end

function string.toTable(s, delimiter)
	local result = {}
	for match in (s..delimiter):gmatch("(.-)"..delimiter) do
		table.insert(result, match)
	end
	return result
end

function string.trim(s)
	return (string.gsub(s, "^%s*(.-)%s*$", "%1"))
end

function table.print(t)
	for k,v in pairs(t) do
		local vType = type(v)
		if vType == "table" then
			Note(k)
			table.print(v)
		else
			Note(k .. ": " .. tostring(v))
		end
	end
end

function table.reverse(t)
	for i = #t - 1, 1, -1 do
		t[#t] = table.remove(t, i)
	end
end

function table.valueMaxStringLength(t)
	local maxStringLength =  0
	for key, value in pairs(t) do
		if string.len(value) > maxStringLength then
			maxStringLength = string.len(value)
		end
	end
	return maxStringLength
end
--#endregion

--#region Bank functions
function BankDepositHalfMoney()
	local moneyString = GetVariable("bankPurseContentsHalf")
	Send("deposit " .. moneyString)
end

function BankPrintAllInfo()
	BankPrintAllBanks()
	ColourNote("#80FF80", "", "Total: " .. BankGetTotalMoney())
end

function BankPrintBank(bankName, amount, currency)

	if type(bankName) ~= "string" then
		ColourNote("red", "", "BankPrintBank error: bankName is not of type string")
	end
	if type(amount) ~= "number" then
		ColourNote("red", "", "BankPrintBank error: amount is not of type number")
	end
	if type(currency) ~= "string" then
		ColourTell("red", "", "BankPrintBank error: currency is not of type string")
	end

	if type(bankName) == "string" and type(amount) == "number" and type(currency) == "string" then
		local bankArray = BankGetBankArray()

		-- Get max length of bank names
		local bankNameTable = {}
		for key, value in pairs(bankArray) do
			table.insert(bankNameTable, key)
		end
		local bankNameStringMaxLength = table.valueMaxStringLength(bankNameTable)

		-- Get max length of local currency amounts
		local localTable = {}
		for key, value in pairs(bankArray) do
			local localAmount = value.amount
			local localCurrency = value.currency
			local localMoney = WichitBeadsToCurrency(localAmount, localCurrency)

			table.insert(localTable, localMoney)
		end
		local localStringMaxLength = table.valueMaxStringLength(localTable)

		-- Get max length of AM currency amount
		local amTable = {}
		for key, value in pairs(bankArray) do
			local amAmount = value.amount
			local amMoney = WichitBeadsToCurrency(amAmount, "AM")
			table.insert(amTable, amMoney)
		end
		local amStringMaxLength = table.valueMaxStringLength(amTable)

		local localAmount = WichitBeadsToCurrency(amount, currency)
		local amAmount = WichitBeadsToCurrency(amount, "AM")
		amAmount = string.gsub(amAmount, "A%$", "")
		ColourTell("red", "", string.addLeadingTrailing(bankName, bankNameStringMaxLength, " ", true))
		Tell(" ")

		if currency ~= "" then
			ColourTell("yellow", "", string.addLeadingTrailing(localAmount, localStringMaxLength, " ", true))
			Tell(" (")
			ColourTell("yellow", "", "A$")
			ColourTell("yellow", "", string.addLeadingTrailing(amAmount, amStringMaxLength - 2, " ", false))
			Tell(")")
		end
		Note("")
	end
end

function BankPrintAllBanks()
	local bankArray = BankGetBankArray()
	if type(bankArray) == "table" then
		local bankTable = {}
		for key, value in pairs(bankArray) do
			table.insert(bankTable, {name = key, amount = value.amount, currency = value.currency})
		end
		table.sort(bankTable, function (k1,k2) return string.lower(k1.name) < string.lower(k2.name) end)
		for index, value in ipairs(bankTable) do
			BankPrintBank(value.name, value.amount, value.currency)
		end
	else
		ColourTell("red", "", "BankPrintAllBanks error: bankArray is not of type table")
	end
end
--#endregion

--#region Variable functions

--#region Get
function BankGetBankArray()
	local bankArray
	local bankBalancesString = GetVariable("bankBalances")
	if type(bankBalancesString) == "nil" then
		local t = {}
		for bankInfoKey, bankInfoValue in pairs(banksInfo) do
			t[bankInfoKey] = {
				amount = 0,
				currency = "",
			}
		end
		bankArray = t
	else
		bankArray = json.decode(bankBalancesString)
	end
	return bankArray
end

function BankGetCurrent()
	local result = GetVariable("bankCurrent")
	if type(result) ~= "string" then
		result = ""
	end
	return result
end

function BankGetTotalMoney()
	local bankArray = BankGetBankArray()
	local totalWichitBeads = 0

	for key, value in pairs(bankArray) do
		totalWichitBeads = totalWichitBeads + value.amount
	end
	return WichitBeadsToCurrency(totalWichitBeads, "AM")
end
--#endregion

--#region Set
function BankSetAmount(name, output, wildcards)
	local bankArray = BankGetBankArray()
	local bankName = BankGetCurrent()
	local localMoney = wildcards[2]
	local currencyType = CurrencyGetType(localMoney)
	local lowestDenomination = CurrencyToLowestDenomination(localMoney, currencyType)
	local wichitBeads = CurrencyToWichitBeads(lowestDenomination, currencyType)

	if bankArray[bankName] then
		bankArray[bankName].amount = wichitBeads
		bankArray[bankName].currency = currencyType
	else
		bankArray[bankName] = { amount = wichitBeads, currency = currencyType }
	end

	BankSetBankBalances(bankArray)
end

function BankSetBankBalances(bankArray)
	if type(bankArray) == "table" then
		SetVariable("bankBalances", json.encode(bankArray))
	else
		Note("BankSetBankBalances error: bankArray is not of type table.")
	end
end

function BankSetCurrent(name, output, wildcards)
	local currentBank = wildcards[1]
	if type(currentBank) == "string" then
		for key, value in pairs(banksInfo) do
			if string.match(value.locations, currentBank) then
				SetVariable("bankCurrent", key)
				break
			end
		end
	else
		Note("BankSetCurrent error: wildcard match is not of type string.")
	end
end

function BankSetPurse(name, output, wildcards)
	local moneyString = wildcards[1]
	SetVariable("bankPurseContents", "")
	SetVariable("bankPurseContentsHalf", "")

	if not (moneyString == "only moths") then
		moneyString = string.gsub(moneyString, " and ", ", ")
		while string.find(moneyString, "one") do
			moneyString = string.gsub(moneyString, "one", "1")
		end
		SetVariable("bankPurseContents", moneyString)
		local moneyTable = string.toTable(moneyString, ", ")
		for i = 1, #moneyTable, 1 do
			local newAmount = string.match(moneyTable[i], "%d+")
			if (newAmount*1 > 1) then
				moneyTable[i] = string.gsub(moneyTable[i], "%d+", math.floor(newAmount/2))
			end
		end
		SetVariable("bankPurseContentsHalf", table.concat(moneyTable,", "))
	end
end
--#endregion

--#region reset
function BankResetBalances()
	DeleteVariable("bankBalances")
	local bankArray = BankGetBankArray()
	BankSetBankBalances(bankArray)
end
--#endregion

--#endregion

--#region Currency functions
function CurrencyGetType(fullMoneyString)
	if string.find(fullMoneyString, "A%$") or string.find(fullMoneyString, "%dp") then
		return "AM"
	elseif string.find(fullMoneyString, "DjToon") then
		return "DJB"
	elseif string.find(fullMoneyString, "Gc") or string.find(fullMoneyString, "Gl") or string.find(fullMoneyString, "Gf") or string.find(fullMoneyString, "Gd") then
		return "GEN"
	elseif string.find(fullMoneyString, "Lp") or string.find(fullMoneyString, "Ls") or string.find(fullMoneyString, "LC") or string.find(fullMoneyString, "LSov") or string.find(fullMoneyString, "LH") then
		return "LAN"
	elseif string.find(fullMoneyString, "%dM") or string.find(fullMoneyString, "%dde") then
		return "EPH"
	elseif string.find(fullMoneyString, "Rh") or string.find(fullMoneyString, "%ds") then
		return "BP"
	elseif string.find(fullMoneyString, "dr") then
		return "KLA"
	end
end

function CurrencyToLowestDenomination(money, type)
	local amountString
	local amount = 0

	if type == "AM" then
		if string.find(money, "A%$") then
			amountString = string.gsub(money, "A%$", "")
			amount = amountString * 100
		else
			amount = string.gsub(money, "p", "")
		end
	elseif type == "BP" then
		local rhinu = 0
		local rhinuString = ""
		local saveloy = 0
		local saveloyString = ""

		rhinuString = string.match(money, "%d+Rh")
		if(not string.isEmpty(rhinuString)) then
			rhinu = string.gsub(rhinuString, "Rh", "")
		end
		if not (rhinu == nil or rhinu == "") then
			amount = (amount + rhinu*120)
		end
	
		saveloyString = string.match(money, "%d+s")
		if not (saveloyString == nil or saveloyString == "") then
			saveloy = string.gsub(saveloyString, "s", "")
		end
		if not (saveloy == nil or saveloy == "") then
			amount = amount + saveloy
		end
	elseif type == "LAN" then
		local multiplicationTable = {82944,6912,576,48,4}

		amountString = string.gsub(money, "-", "0")
		amountString = string.gsub(amountString, "%a+", "")
		amountString = string.trim(amountString)
		
		local farthingsAmount
		if string.find(money, "./4") then
			farthingsAmount = string.match(money, "%d/4")
			farthingsAmount = string.gsub(farthingsAmount, "/4", "")
			amountString = string.gsub(amountString, "%d/4", "")
		elseif string.find(money, "./2") then
			farthingsAmount = string.match(money, "%d/2")
			farthingsAmount = string.gsub(farthingsAmount, "/2", "")
			farthingsAmount = farthingsAmount * 2
			amountString = string.gsub(amountString, "%d/2", "")
		end

		local amountTable = string.toTable(amountString,"|")

		for i = 1, #amountTable do
			if string.isEmpty(amountTable[i]) then
				amountTable[i] = 0
			end
			amount = amount + (amountTable[i] * multiplicationTable[i])
		end

		if not (farthingsAmount == nil or farthingsAmount == "") then
			amount = amount + farthingsAmount
		end
	elseif type == "GEN" then
		amountString = string.gsub(money, "G%a", "")
		amountString = string.match(amountString, "[%d,?]+")
		local amountTable = string.toTable(amountString, ",")
		local multiplicationTable = {1,100,1000,10000}

		table.reverse(amountTable)

		for i = 1, #amountTable, 1 do
			amount = amount + (amountTable[i] * multiplicationTable[i])
		end
	elseif type == "DJB" then
		amountString = string.gsub(money, "DjToon ", "")
		amount = amountString * 100
	elseif type == "EPH" then
		local amountMina = 0
		local amountStater = 0
		local amountDerechmus = 0
		
		if string.find(money, "%d+M") then
			amountMina = string.match(money, "%d+M")
			amountMina = string.gsub(amountMina, "M", "")
			amount = amount + (amountMina * 4800)
		end
		
		if string.find(money, "S%d+") then
			amountStater = string.match(money, "S%d+")
			amountStater = string.gsub(amountStater, "S", "")
			amount = amount + (amountStater * 96)
		end

		if string.find(money, "%d+de") then
			amountDerechmus = string.match(money, "%d+de")
			amountDerechmus = string.gsub(amountDerechmus, "de", "")
			amount = amount + amountDerechmus
		end
	elseif type == "KLA" then
		amountString = string.gsub(money, " dr", "")
		if string.find(amountString, ",") then
			amountString = string.gsub(amountString, ",", "")
			amount = amountString * 1
		else
			amount = amountString * 100
		end
	end
	return amount
end

function CurrencyToWichitBeads(baseDenominationMoney, type)
	if (type == "AM") or (type == "BP") then
		return baseDenominationMoney * 4
	elseif (type == "LAN") or (type == "GEN") then
		return baseDenominationMoney * 3
	elseif (type == "DJB") or (type == "EPH") then
		return baseDenominationMoney * 2
	elseif type == "KLA" then
		return baseDenominationMoney * 5
	end
end

function WichitBeadsToCurrency(wichitBeads, type)
	if type == "AM" then
		local lowestDenomination = wichitBeads/4
		local result = (lowestDenomination / 100)
		result = (math.floor((result * 100)+0.5)/100)
		return "A$" .. result
	elseif type == "DJB" then
		local lowestDenomination = wichitBeads/2
		return "DjToon " .. lowestDenomination / 100
	elseif type == "BP" then
		local lowestDenomination = wichitBeads/4

		local rhinu = math.floor(lowestDenomination/120)
		local saveloy = lowestDenomination - (rhinu*120)

		local result = {}

		if rhinu > 0 then
			table.insert(result, rhinu .. "Rh")
		end
		if saveloy > 0 then
			table.insert(result, saveloy .. "s")
		end

		return table.concat(result, " ")
	elseif type == "EPH" then
		local lowestDenomination = wichitBeads/2

		local mina = math.floor(lowestDenomination/4800)
		local stater = math.floor((lowestDenomination - (mina * 4800))/96)
		local derechmus = math.floor(lowestDenomination - (mina * 4800) - (stater*96))

		local result = {}
		if mina > 0 then
			table.insert(result, mina .. "M")
		end
		if stater > 0 then
			table.insert(result, "S" .. stater .. "|" .. derechmus .. "de")
		else
			table.insert(result, derechmus .. "de")
		end

		return table.concat(result, " ")
	elseif type == "GEN" then
		local lowestDenomination = wichitBeads/3

		local ducat = math.floor(lowestDenomination/10000)
		local forin = math.floor((lowestDenomination - (ducat*10000))/1000)
		local livre = math.floor((lowestDenomination - (ducat*10000) - (forin*1000))/100)
		local cent = math.floor(lowestDenomination - (ducat*10000) - (forin*1000) - (livre*100))

		local resultTable = {}
		if ducat > 0 then
			table.insert(resultTable, ducat)
		end
		if forin > 0 then
			table.insert(resultTable, forin)
		end
		if livre > 0 then
			table.insert(resultTable, livre)
		end
		if cent > 0 then
			table.insert(resultTable, cent)
		end

		local resultString = table.concat(resultTable, ",")

		-- add denotation
		if #resultTable == 4 then
			resultString = resultString .. "Gd"
		elseif #resultTable == 3 then
			resultString = resultString .. "Gf"
		elseif #resultTable == 2 then
			resultString = resultString .. "Gl"
		elseif #resultTable == 1 then
			resultString = resultString .. "Gc"
		end

		return resultString
	elseif type == "LAN" then
		local lowestDenomination = wichitBeads/3

		local hedgehog = math.floor(lowestDenomination/82944)
		local sovereign = math.floor((lowestDenomination - (hedgehog * 82944))/6912)
		local crown = math.floor((lowestDenomination - (hedgehog * 82944) - (sovereign * 6912))/576)
		local shilling = math.floor((lowestDenomination - (hedgehog * 82944) - (sovereign * 6912) - (crown * 576))/48)
		local penny = math.floor((lowestDenomination - (hedgehog * 82944) - (sovereign * 6912) - (crown * 576) - (shilling * 48))/4)
		local farthing = math.floor(lowestDenomination - (hedgehog * 82944) - (sovereign * 6912) - (crown * 576) - (shilling * 48) - (penny * 4))

		local resultTable = {}
		table.insert(resultTable, hedgehog)
		table.insert(resultTable, sovereign)
		table.insert(resultTable, crown)
		table.insert(resultTable, shilling)
		table.insert(resultTable, penny)

		-- change 0 into "-"
		for index, value in ipairs(resultTable) do
			if value == 0 then
				resultTable[index] = "-"
			end
		end

		-- remove leading empty notation
		local resultString = table.concat(resultTable, "|")
		while string.match(resultString, "^%-|") do
			resultString = string.gsub(resultString, "^%-|", "", 1)
		end

		-- reset resultString if empty
		if resultString == 0 then
			resultString = ""
		end

		-- add denotation
		local fooTable = string.toTable(resultString, "|")
		if #fooTable == 5 then
			resultString = "LH " .. resultString
		elseif #fooTable == 4 then
			resultString = "LSov " .. resultString
		elseif #fooTable == 3 then
			resultString = "LC " .. resultString
		elseif #fooTable == 2 then
			resultString = "Ls " .. resultString
		else
			resultString = "Lp " .. resultString
		end

		-- add farthing amount
		if farthing == 3 then
			resultString = resultString .. " 3/4"
		elseif farthing == 2 then
			resultString = resultString .. " 1/2"
		elseif farthing == 1 then
			resultString = resultString .. " 1/4"
		end

		if resultString == "Lp " then
			resultString = ""
		end

		return resultString
	elseif type == "KLA" then
		local lowestDenomination = wichitBeads/5
		return (lowestDenomination / 100) .. " dr"
	end
end
--#endregion
]]>
</script> 

<!--  Triggers  -->
<triggers>
	<!-- Bank Triggers -->
		<trigger
			enabled="y"
			regexp="y"
			match="(You have|This gives a total of) (.*) in your account( after the withdrawal)?\."
			name="lblBankSetAmount"
			group="BankTrigger"
			script="BankSetAmount"
			sequence="100"
		>
		</trigger>
		<trigger
			enabled="y"
			regexp="y"
			match="\[(Bing\'s First Bank)\]"
			group="BankTrigger"
			script="BankSetCurrent"
			sequence="100"
		>
		</trigger>
		<trigger
			enabled="y"
			regexp="y"
			match="\[(branch of Bing\'s Bank)\]"
			group="BankTrigger"
			script="BankSetCurrent"
			sequence="100"
		>
		</trigger>
		<trigger
			enabled="y"
			regexp="y"
			match="\[(neat branch of Bing\'s bank)\]"
			group="BankTrigger"
			script="BankSetCurrent"
			sequence="100"
		>
		</trigger>
		<trigger
			enabled="y"
			regexp="y"
			match="\[(Lancrastian Farmers\' Cooperative Bank)\]"
			group="BankTrigger"
			script="BankSetCurrent"
			sequence="100"
		>
		</trigger>
		<trigger
			enabled="y"
			regexp="y"
			match="\[(branch of the First Imperial Bank of the Empire)\]"
			group="BankTrigger"
			script="BankSetCurrent"
			sequence="100"
		>
		</trigger>
		<trigger
			enabled="y"
			regexp="y"
			match="\[(Klatchian Continental Bank)\]"
			group="BankTrigger"
			script="BankSetCurrent"
			sequence="100"
		>
		</trigger>
		<trigger
			enabled="y"
			regexp="y"
			script="BankSetCurrent"
			group="BankTrigger"
			match="\[(Genua National Bank)\]"
			sequence="100"
		>
		</trigger>
	<!-- Purse Triggers -->
		<trigger
			enabled="y"
			regexp="y"
			match="Your purse contains (.*)\."
			group="BankTrigger"
			script="BankSetPurse"
			sequence="100"
		>
		</trigger>
</triggers>

<!--  Aliases  -->
<aliases>
	<alias
		enabled="y"
		regexp="y"
		ignore_case="y"
		match="^banks?$"
		group="BankAlias"
		script="BankPrintAllInfo"
		sequence="100"
	>
	</alias>
	<alias
		enabled="y"
		regexp="y"
		ignore_case="y"
		match="banks?reset"
		group="BankAlias"
		script="BankResetBalances"
		sequence="100"
	>
	</alias>
	<alias
		enabled="y"
		regexp="y"
		ignore_case="y"
		match="^deposithalf$"
		group="BankAlias"
		script="BankDepositHalfMoney"
		sequence="100"
	>
	</alias>
</aliases>

<!--  Timers  -->
<timers>
</timers>

</muclient>